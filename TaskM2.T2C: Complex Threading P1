#include <iostream>
#include <vector>
#include <chrono>

using namespace std;
using namespace std::chrono;

void quicksort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; ++j) {
            if (arr[j] < pivot) {
                ++i;
                swap(arr[i], arr[j]);
            }
        }
        swap(arr[i + 1], arr[high]);
        int pIndex = i + 1;

        quicksort(arr, low, pIndex - 1);
        quicksort(arr, pIndex + 1, high);
    }
}

int main() {
    int n = 1000000; // Adjust the size of array as per requirement
    vector<int> arr(n);

    // Initialize array with random values
    srand(time(NULL));
    for (int i = 0; i < n; ++i) {
        arr[i] = rand() % 1000;
    }

    auto start = high_resolution_clock::now();

    quicksort(arr, 0, n - 1);

    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<milliseconds>(stop - start);
    cout << "Sequential QuickSort took: " << duration.count() << " milliseconds." << endl;

    return 0;
}
